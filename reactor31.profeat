ctmc

const double pf_ion = 2.4e-5;//1e-6; //fail propability ionization chamber
const double pr_ion = 0.072;//3e-3; //replacement rate ionization chamber
const double pf_rps = 2.4e-3;//1e-4; //fail propability RPS
const double pr_rps = 0.24;//1e-2; //replacement rate RPS
const double pf_thermo = 2.4e-4;//1e-6; //fail propability thermo
const double pr_thermo = 0.078;//3e-3; //replacement rate thermo
const double hourly_cost = 1000;
const int max_spares_ion = 10;
const int min_spares_rps = 95;
const int max_spares_rps = 200;
const int max_spares_thermo = 50;
const int k = 2; // minimum of two working parts


root feature
	all of Reactor;
endfeature


feature Reactor
	all of RPS, Ion, Thermo;
	rewards "cost"
		RPS.i_parts < k | Ion.i_parts < k | Thermo.i_parts < k : hourly_cost;
	endrewards
endfeature

feature RPS
	modules rps_impl;

	rewards "cost"
		cost : (8 * s_parts); 
	endrewards
endfeature

feature Ion
	modules ion_impl;

	rewards "cost"
		cost : (80 * s_parts); 
	endrewards
endfeature

feature Thermo
	modules thermo_impl;

	rewards "cost"
		cost : (1.2 * s_parts); 
	endrewards
endfeature

module rps_impl
	replace : [0 .. 3] init 0;
	s_parts : [0 .. max_spares_rps];//spare parts
	cost : bool init true; //add costs for spare parts once
	i_parts : [0 .. 3] init 3;// implemented parts (warehouse parts cannot fail)
	in_repair: bool init false;

	[cost] cost -> 1: (cost' = false);
	[step] i_parts > 0 & replace < 3 -> i_parts*pf_rps : (i_parts' = i_parts - 1) & (replace' = replace + 1) + (1 - i_parts*pf_rps) : (replace' = replace);
	[step] !in_repair & replace > 0 & !Ion.in_repair & !Thermo.in_repair -> 1 : (in_repair' = true); 
	[step] in_repair & replace > 0 & s_parts > 0 & i_parts < 3 -> pr_rps : (i_parts' = i_parts + 1) & (s_parts' = s_parts - 1) & (replace' = replace - 1) & (in_repair' = false) + (1 - pr_rps) : (replace' = replace);
endmodule

module ion_impl
	replace : [0 .. 3] init 0;
	s_parts : [0 .. max_spares_ion]; //spare parts
	cost : bool init true; //add costs for spare parts once
	i_parts : [0 .. 3] init 3;// implemented parts (warehouse parts cannot fail)
	in_repair: bool init false;

	[cost] cost -> 1: (cost' = false);
	[step] i_parts > 0 & replace < 3 -> i_parts*pf_ion : (i_parts' = i_parts - 1) & (replace' = replace + 1) + (1 - i_parts*pf_ion) : (replace' = replace);
	[step] !in_repair & replace > 0 & !RPS.in_repair & !Thermo.in_repair -> 1 : (in_repair' = true); 
	[step] in_repair & replace > 0 & s_parts > 0 & i_parts < 3 -> pr_ion : (i_parts' = i_parts + 1) & (s_parts' = s_parts - 1) & (replace' = replace - 1) & (in_repair' = false) + (1 - pr_ion) : (replace' = replace);
endmodule

module thermo_impl
	replace : [0 .. 3] init 0;
	s_parts : [0 .. max_spares_thermo]; //spare parts
	cost : bool init true; //add costs for spare parts once
	i_parts : [0 .. 3] init 3;// implemented parts (warehouse parts cannot fail)
	in_repair: bool init false;

	[cost] cost -> 1: (cost' = false);
	[step] i_parts > 0 & replace < 3 -> i_parts*pf_thermo : (i_parts' = i_parts - 1) & (replace' = replace + 1) + (1 - i_parts*pf_thermo) : (replace' = replace);
	[step] !in_repair & replace > 0 & !RPS.in_repair & !Ion.in_repair -> 1 : (in_repair' = true); 
	[step] in_repair & replace > 0 & s_parts > 0 & i_parts < 3 -> pr_thermo : (i_parts' = i_parts + 1) & (s_parts' = s_parts - 1) & (replace' = replace - 1) & (in_repair' = false) + (1 - pr_thermo) : (replace' = replace);
endmodule

//module repair
//	working init false;

init
	mod(RPS.s_parts, 10) = 0 & RPS.s_parts > min_spares_rps & mod(Thermo.s_parts, 5) = 0
endinit



	