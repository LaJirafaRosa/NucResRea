const double pf_ion = 2.4e-5;//1e-6; //fail propability ionization chamber
const double pr_ion = 0.072;//3e-3; //replacement rate ionization chamber
const double pf_rps = 2.4e-3;//1e-4; //fail propability RPS
const double pr_rps = 0.24;//1e-2; //replacement rate RPS
const double hourly_cost = 1000;
const int max_spares_ion = 10;
const int min_spares_rps = 100;
const int max_spares_rps = 200;
const int k = 2; // minimum of two working parts


root feature
	all of Repair;
endfeature


//feature Reactor
//	//all of RPS, Ion;
//	rewards "cost"
//		RPS.i_parts < k | Ion.i_parts < k : hourly_cost;
//	endrewards
//	//rewards "downtime"
//	//	RPS.in_repair & Ion.in_repair : 1;
//	//endrewards
//endfeature

feature Repair
	modules repair_impl;

	rewards "cost"
		RPS_i_parts < k | Ion_i_parts < k : hourly_cost;
		cost : (80 * Ion_s_parts + 8 * RPS_s_parts); 
	endrewards

	rewards "downtime"
		Ion_replace > 0 : 1;
	endrewards

endfeature

//feature RPS
//	modules rps_impl;
//
//	rewards "cost"
//		cost : (8 * s_parts); 
//	endrewards
//endfeature

//feature Ion
//	modules ion_impl;
//
//	rewards "cost"
//		cost : (80 * s_parts); 
//	endrewards
//endfeature


//module rps_impl
//	replace : [0 .. 3] init 0;
//	s_parts : [0 .. max_spares_rps];//spare parts
//	cost : bool init true; //add costs for spare parts once
//	i_parts : [0 .. 3] init 3;// implemented parts (warehouse parts cannot fail)
//
//	[cost] cost -> 1: (cost' = false);
//	[step] i_parts > 0 & replace < 3 -> i_parts*pf_rps : (i_parts' = i_parts - 1) & (replace' = replace + 1) + (1 - i_parts*pf_rps) : (replace' = replace);
//endmodule

//module ion_impl
//	replace : [0 .. 3] init 0;
//	s_parts : [0 .. max_spares_ion]; //spare parts
//	cost : bool init true; //add costs for spare parts once
//	i_parts : [0 .. 3] init 3;// implemented parts (warehouse parts cannot fail)
//
//	[cost] cost -> 1: (cost' = false);
//	[step] i_parts > 0 & replace < 3 -> i_parts*pf_ion : (i_parts' = i_parts - 1) & (replace' = replace + 1) + (1 - i_parts*pf_ion) : (replace' = replace);
//endmodule

module repair_impl
	last_repaired : [0 .. 2] init 0; // 0 start 1 rps 2 ion
	repairing : [0 .. 2 ] init 0;
	cost : bool init true;

	Ion_s_parts : [0 .. max_spares_ion]; //spare parts
	Ion_i_parts : [0 .. 3] init 3;// implemented parts (warehouse parts cannot fail)
	Ion_replace : [0 .. 3] init 0;

	RPS_s_parts : [0 .. max_spares_rps]; //spare parts
	RPS_i_parts : [0 .. 3] init 3;// implemented parts (warehouse parts cannot fail)
	RPS_replace : [0 .. 3] init 0;

	[cost] cost -> 1: (cost' = false);
	
//Ion
	[a] Ion_i_parts > 0 & Ion_replace < 3 -> Ion_i_parts*pf_ion : (Ion_i_parts' = Ion_i_parts - 1) & (Ion_replace' = Ion_replace + 1) + (1 - Ion_i_parts*pf_ion) : (Ion_replace' = Ion_replace);
	//[step] (last_repaired != 2 | RPS_replace = 0) & 
	[b] repairing = 0  & Ion_replace > 0 & Ion_s_parts > 0 -> 1 : (repairing' = 2) & (last_repaired' = 2); 
	[c] repairing = 2 & Ion_replace > 0 & Ion_s_parts > 0 & Ion_i_parts < 3 -> 
		pr_ion : (Ion_i_parts' = Ion_i_parts + 1) & (Ion_s_parts' = Ion_s_parts - 1) & (Ion_replace' = Ion_replace - 1) & (repairing' = 0)
		+ (1 - pr_ion) : (repairing' = repairing);

 
//RPS
	[d] RPS_i_parts > 0 & RPS_replace < 3 -> RPS_i_parts*pf_rps : (RPS_i_parts' = RPS_i_parts - 1) & (RPS_replace' = RPS_replace + 1) + (1 - RPS_i_parts*pf_rps) : (RPS_replace' = RPS_replace);
	//[step] (last_repaired != 1 | Ion_replace = 0) & 
	[e] repairing = 0  & RPS_replace > 0 & RPS_s_parts > 0 -> 1 : (repairing' = 1) & (last_repaired' = 1); 
	[f] repairing = 1 & RPS_replace > 0 & RPS_s_parts > 0 & RPS_i_parts < 3 -> 
		pr_rps : (RPS_i_parts' = RPS_i_parts + 1) & (RPS_s_parts' = RPS_s_parts - 1) & (RPS_replace' = RPS_replace - 1) & (repairing' = 0)
		+ (1 - pr_rps) : (repairing' = repairing); 
endmodule




//label "fail" = RPS.i_parts < k | Ion.i_parts < k;







	